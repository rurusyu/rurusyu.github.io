{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react-event/","webpackCompilationHash":"94aece88beffd423d1e9","result":{"data":{"markdownRemark":{"id":"aa2fef27-ea72-5df3-969f-0b0abdf3c678","html":"<h3 id=\"리액트-이벤트-핸들러\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%9F%AC\" aria-label=\"리액트 이벤트 핸들러 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 이벤트 핸들러</h3>\n<ol>\n<li>트윗메인화면에 트윗을 입력하고 버튼 누르면 아래에 트윗 리스트 나오게 한다.</li>\n<li>트윗메인화면에서 textarea는 TweetRightBox라는 컴포넌트로 불러와서 메인화면에 조립했다.</li>\n</ol>\n<h5 id=\"트윗메인화면\"><a href=\"#%ED%8A%B8%EC%9C%97%EB%A9%94%EC%9D%B8%ED%99%94%EB%A9%B4\" aria-label=\"트윗메인화면 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트윗메인화면</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...(생략)\n&lt;TweetRightBox onChange={this.handleChange} onClick={this.handleClick} value={this.state.inputMessage}/&gt;</code></pre></div>\n<p>TweetRightBox에서 이벤트값을 props로 넘겨서 트윗메인 화면에서 받은 다음, 이벤트 구현하였다.</p>\n<p>onChange는 textarea 내에서 값이 변화하면 브라우져가 인식한다. 최종적으로 넘길데이터는 </p>\n<p>유저이름, 메시지내용, 프로필사진, 트윗생성날짜이다(유저가 정한다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> handleChange =(e) =&gt; {\n     this.setState({\n         username : this.props.username,   //다른 컴포넌트에서 값을 불러왔음.\n         inputMessage : e.target.value,    // onChange의 e(이벤트)값으로 현재 입력값 추출\n         propfilePhoto : &quot;😻&quot;,\n         created_at : this.dateFunc(),\n     });\n }</code></pre></div>\n<h4 id=\"트윗메인-화면의-state\"><a href=\"#%ED%8A%B8%EC%9C%97%EB%A9%94%EC%9D%B8-%ED%99%94%EB%A9%B4%EC%9D%98-state\" aria-label=\"트윗메인 화면의 state permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트윗메인 화면의 state</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">state = {\n      TweetList : [],    // 결국 이 배열안에 내용을 랜더링 \n      username : &quot;&quot;,\n      inputMessage :&quot;&quot;,\n      propfilePhoto : &quot;&quot;, \n      created_at : &quot;&quot;       \n  }</code></pre></div>\n<p>state 값은 통상 위와 같은 패턴으로 작성하고, 데이터만 관리한다.  </p>\n<p>리스트에 생성될 HTML은 render()안에 return에서 생성해준다.  </p>\n<h4 id=\"입력-후-버튼-클릭시-이벤트\"><a href=\"#%EC%9E%85%EB%A0%A5-%ED%9B%84-%EB%B2%84%ED%8A%BC-%ED%81%B4%EB%A6%AD%EC%8B%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8\" aria-label=\"입력 후 버튼 클릭시 이벤트 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력 후 버튼 클릭시 이벤트</h4>\n<p>버튼클릭시 이벤트는 유저이름, 메시지, 사진, 생성날짜가 트윗으로 들어가야한다.</p>\n<h1 id=\"리액트에서-가장-주의해야할점\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-%EA%B0%80%EC%9E%A5-%EC%A3%BC%EC%9D%98%ED%95%B4%EC%95%BC%ED%95%A0%EC%A0%90\" aria-label=\"리액트에서 가장 주의해야할점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트에서 가장 주의해야할점!</h1>\n<ol>\n<li>setState안에 배열값은 직접적으로 변경하면 안된다. </li>\n<li>그럼 어떻게 ?? 기존값을 복사해서 저장한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> handleClick =(e)=&gt;{\n    const {username,inputMessage,propfilePhoto,created_at} = this.state \n    \n    //1.입력하면 들어오는 값을 새로 newTweet이라는 객체에 담아서\n    const newTweet ={\n        username : username,\n        inputMessage : inputMessage,\n        propfilePhoto : propfilePhoto,\n        created_at : created_at\n    }\n    //2. newTweets라는 배열에 넣는다.\n    const newTweets = [newTweet, ...this.state.TweetList]  //이렇게 넣으면 가장 최신 트윗이 위로온다. \n                      //this.state.TweetList =&gt; 위에 state안에 있는 배열임. \n                      // ...[배열]은 배열의 복사를 의미.                                \n\n    //3. textarea 값 초기화 및 리스트유지.     \n    this.setState({\n        inputMessage : &quot;&quot;,\n        TweetList : newTweets\n    })\n }</code></pre></div>\n<h4 id=\"html생성--map-이용패턴\"><a href=\"#html%EC%83%9D%EC%84%B1--map-%EC%9D%B4%EC%9A%A9%ED%8C%A8%ED%84%B4\" aria-label=\"html생성  map 이용패턴 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML생성 => map 이용(패턴)</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. jsx문법으로 html양식을 생성하고, state의 데이터값을 입력한다.\n2. jsx에서 for문을 돌릴때는 key값이 반드시 필수. index로 키값하는 것은 좋지 않다. 유니크한 값이 좋다.</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;ul id=&quot;list-root&quot;&gt;\n   {\n      this.state.TweetList ? this.state.TweetList.map((tweet, i) =&gt; {  //맵에 대한 키값 i\n          return(\n             &lt;div class=&quot;tweet-wrap-list&quot;&gt;\n             &lt;div class=&quot;user-photo&quot;&gt;{tweet.propfilePhoto}&lt;/div&gt;\n             &lt;div class=&quot;wrap-name-and-comment-and-times&quot;&gt;\n               &lt;div class=&quot;user-name&quot;&gt;{tweet.username}&lt;/div&gt;\n               &lt;div class=&quot;user-comment&quot;&gt;{tweet.inputMessage}             \n               &lt;/div&gt;\n               &lt;span class=&quot;written-times&quot;&gt;{tweet.created_at}&lt;/span&gt;\n             &lt;/div&gt;          \n           &lt;/div&gt;  \n          );\n      }) : &quot;&quot; \n   }\n &lt;/ul&gt; </code></pre></div>\n<h3 id=\"기억할점\"><a href=\"#%EA%B8%B0%EC%96%B5%ED%95%A0%EC%A0%90\" aria-label=\"기억할점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기억할점!</h3>\n<ol>\n<li>리액트 state는 클래스로 선언된 곳에서 상태관리로 사용한다. 함수형은 No!</li>\n<li>state 상태관리는 데이터만 관리! 그리고 그 데이터 부분을 랜더링하게 해주는 배열 필요!\n(데이터와 배열)</li>\n<li>jsx에서 for문 돌릴때 키값이 필요하다. </li>\n<li>화면에 자료 뿌리는 것은 html부분은 통상 for나 map을 이용해서 뿌리고, 그사이에 데이터를 넣어준다. </li>\n</ol>","fields":{"slug":"/posts/react-event/","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-06-19T21:00:11.121Z","description":"리액트 event","tags":["React"],"title":"[React] Event Handle, state 상태관리, jsx for문 "}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/react-event/"}}}